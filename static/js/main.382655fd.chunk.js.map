{"version":3,"sources":["components/Editor/Editor.js","components/Preview/Preview.js","components/Header/Header.js","App.js","registerServiceWorker.js","index.js"],"names":["editor","props","react_default","a","createElement","id","value","text","onChange","preview","dangerouslySetInnerHTML","__html","marked","header","demoText","setOptions","breaks","App","state","changeHandler","e","_this","setState","target","className","Header","Editor","this","Preview","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"iPAaeA,EAXA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEC,GAAG,SACHC,MAAOL,EAAMM,KACbC,SAAUP,EAAMO,aCMTC,EAXC,SAACR,GACf,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEC,GAAG,UACHK,wBAAyB,CAACC,OAAQC,IAAOX,EAAMM,WCExCM,EARA,WACb,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,GAAG,UAAP,wCCEAS,EAAQ,ygBAkCdF,IAAOG,WAAW,CAChBC,QAAQ,QA4BKC,6MAxBbC,MAAQ,CACNX,KAAMO,KAGRK,cAAgB,SAACC,GACfC,EAAKC,SAAS,CACZf,KAAMa,EAAEG,OAAOjB,iFAKjB,OACEJ,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACbtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,CACEnB,KAAMoB,KAAKT,MAAMX,KACjBC,SAAUmB,KAAKR,gBACjBjB,EAAAC,EAAAC,cAACwB,EAAD,CACErB,KAAMoB,KAAKT,MAAMX,eAnBTsB,aCnCZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1B,QACfoB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,yBAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,yBAAN,sBAEP5B,GAiDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAsB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBmC","file":"static/js/main.382655fd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst editor = (props) => {\r\n  return (\r\n    <div>\r\n      <textarea \r\n        id=\"editor\"\r\n        value={props.text}\r\n        onChange={props.onChange} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default editor;","import React from \"react\";\r\nimport marked from \"marked\";\r\n\r\nconst preview = (props) => {\r\n  return (\r\n    <div>\r\n      <div \r\n        id=\"preview\"\r\n        dangerouslySetInnerHTML={{__html: marked(props.text)}} >\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default preview;","import React from \"react\";\r\n\r\nconst header = () => {\r\n  return (\r\n    <div>\r\n      <h1 id=\"header\">A GitHub style markdown previewer.</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default header;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport marked from \"marked\";\nimport Editor from \"./components/Editor/Editor\";\nimport Preview from \"./components/Preview/Preview\";\nimport Header from \"./components/Header/Header\";\n\nconst demoText = \n`# H1 header\n\n## H2 header\n\n[link](https://www.google.com)\n\n\\`inline code\\`\n\n\\`\\`\\`\ncode\nblock\n\\`\\`\\`\n\n1. list item 1\n1. list item 2\na. sub list item 1\nb. sub list item 2\n\n\n* unordered list item\n\n> blockquote\n\n![a dog on a path in a forest](https://images.unsplash.com/photo-1537095267667-f65b33e26331?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=02041be564e4417fe60b9ec399b10750&auto=format&fit=crop&w=400&q=80 \"Dog\")\n\n*italic text*\n\n**bold text**\n\n**_italic bold text_**\n\n~~striked through text~~`\n\nmarked.setOptions({\n  breaks: true\n});\n\nclass App extends Component {\n  state = {\n    text: demoText\n  }\n\n  changeHandler = (e) => {\n    this.setState({\n      text: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Editor \n          text={this.state.text}\n          onChange={this.changeHandler} />\n        <Preview \n          text={this.state.text} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}